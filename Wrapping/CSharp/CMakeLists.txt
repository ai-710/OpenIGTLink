cmake_minimum_required(VERSION 3.22)

project( OpenIGTLink_CSharp )

# Find C#
enable_language(CSharp)

include_directories( ${OpenIGTLink_INCLUDE_DIRS} )

# set_source_files_properties ( OpenIGTLink.i PROPERTIES CPLUSPLUS ON )


set(OpenIGTLink_VERSION_CSHARP_AssemblyVersion "${OpenIGTLink_VERSION_MAJOR}.${OpenIGTLink_VERSION_MINOR}.${OpenIGTLink_VERSION_PATCH}")

# Make sure the nested directory structure exists
# set(CSHARP_SOURCE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/CSharpSources CACHE INTERNAL "")
# set(CSHARP_BINARY_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/CSharpBinaries CACHE INTERNAL "")
# file(MAKE_DIRECTORY ${CSHARP_SOURCE_DIRECTORY})
# file(MAKE_DIRECTORY ${CSHARP_BINARY_DIRECTORY})

# find swig
find_package(SWIG 4.0 REQUIRED)
include (UseSWIG)

set(library_name "OpenIGTLink")

# Create swig target
set(CMAKE_SWIG_OUTDIR ${CSHARP_SOURCE_DIRECTORY})
if ( UNIX )
  set(CMAKE_SWIG_FLAGS -dllimport \"lib${library_name}CSharpNative\")
else (WIN32 )
  set(CMAKE_SWIG_FLAGS -dllimport \"${library_name}CSharpNative\")
endif ( )

set(CMAKE_SWIG_FLAGS -I${CMAKE_CURRENT_SOURCE_DIR} -namespace \"org.openigtlink\" ${CMAKE_SWIG_GLOBAL_FLAGS} ${CMAKE_SWIG_FLAGS})

set(SWIG_MODULE_OpenIGTLinkCSharpNative_EXTRA_DEPS ${SWIG_EXTRA_DEPS}
  ${CMAKE_CURRENT_SOURCE_DIR}/CSharp.i
  ${CMAKE_CURRENT_SOURCE_DIR}/CSharpTypemapHelper.i
)

swig_add_library(${library_name}CSharpNative LANGUAGE csharp SOURCES ${library_name}.i)
message("SWIG_MODULE_OpenIGTLinkCSharpNative_TARGET_NAME: ${SWIG_MODULE_OpenIGTLinkCSharpNative_TARGET_NAME}")
target_link_libraries(${SWIG_MODULE_OpenIGTLinkCSharpNative_TARGET_NAME} ${OpenIGTLink_LIBRARIES})
set_target_properties(${SWIG_MODULE_OpenIGTLinkCSharpNative_TARGET_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CSHARP_BINARY_DIRECTORY})

if ( APPLE)
  set_target_properties(${SWIG_MODULE_OpenIGTLinkCSharpNative_TARGET_NAME} PROPERTIES PREFIX "lib")
  set_target_properties(${SWIG_MODULE_OpenIGTLinkCSharpNative_TARGET_NAME} PROPERTIES SUFFIX ".dylib")
elseif ( UNIX )
  set_target_properties(${SWIG_MODULE_OpenIGTLinkCSharpNative_TARGET_NAME} PROPERTIES PREFIX "lib")
  set_target_properties(${SWIG_MODULE_OpenIGTLinkCSharpNative_TARGET_NAME} PROPERTIES SUFFIX ".so")
else ( WIN32 )
  set_target_properties(${SWIG_MODULE_OpenIGTLinkCSharpNative_TARGET_NAME} PROPERTIES PREFIX "")
  set_target_properties(${SWIG_MODULE_OpenIGTLinkCSharpNative_TARGET_NAME} PROPERTIES SUFFIX ".dll")

  foreach ( CMAKE_CONFIGURATION_TYPE ${CMAKE_CONFIGURATION_TYPES} )
    string(TOUPPER ${CMAKE_CONFIGURATION_TYPE} CMAKE_CONFIGURATION_TYPE)
    set_target_properties(${SWIG_MODULE_OpenIGTLinkCSharpNative_TARGET_NAME}
      PROPERTIES LIBRARY_OUTPUT_DIRECTORY_${CMAKE_CONFIGURATION_TYPE} "${CSHARP_BINARY_DIRECTORY}")
    set_target_properties(${SWIG_MODULE_OpenIGTLinkCSharpNative_TARGET_NAME}
      PROPERTIES RUNTIME_OUTPUT_DIRECTORY_${CMAKE_CONFIGURATION_TYPE} "${CSHARP_BINARY_DIRECTORY}")
  endforeach( )
endif( )
#openigtlink_strip_target( ${SWIG_MODULE_OpenIGTLinkCSharpNative_TARGET_NAME} )

# These CSharp files are generated by SWIG, they are not there
# during the first build. But the charp_add_library will add them as
# a dependency when the exists. This is needed for CMP0058
#file(GLOB _files "${CSHARP_SOURCE_DIRECTORY}/*.cs")
#add_custom_command( TARGET ${SWIG_MODULE_OpenIGTLinkCSharpNative_TARGET_NAME}
#POST_BUILD
#BYPRODUCTS ${_files} )

# Configure AssemblyInfo.cs
# configure_file(
  # ${CMAKE_CURRENT_SOURCE_DIR}/AssemblyInfo.cs.in
  # ${CSHARP_SOURCE_DIRECTORY}/AssemblyInfo.cs
  # @ONLY
# )

# Add managed wrapper
#csharp_add_library(
#  OpenIGTLinkCSharpManaged
#  ${CSHARP_SOURCE_DIRECTORY}/*.cs
#)
# add_dependencies(OpenIGTLinkCSharpManaged ${SWIG_MODULE_OpenIGTLinkCSharpNative_TARGET_NAME})


# Packaging for distribution
# add_subdirectory(dist)